from torch.nn import functional as F
import torch
import numpy as np
import cv2
from matplotlib import pyplot as plt
from result import instance_handler
def draw_ok_edge(data):

    org_pth = '/media/dsl/20d6b919-92e1-4489-b2be-a092290668e4/xair/result/tm.jpg'
    org_img = cv2.imread(org_pth)

    cv2.polylines(org_img, np.asarray([data], np.int), False, (255, 255, 255), thickness=2)

    plt.imshow(org_img)
    plt.show()
def get_attr(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    dist = np.sqrt((y2-y1)**2+(x2-x1)**2)
    return dist

def combine_tt(x,y):
     if x['bootom'] is not None and y['top'] is not None:
          dx = x['bootom']
          dy = y['top']
          if dx['y'] + 1 == dy['y']:

               st1 = dx['start']
               end1 = dx['end']

               st2 = dy['start']
               end2 = dy['end']

               l1 = end1 - st1
               l2 = end2 - st2

               l = min(end1, end2) - max(st1, st2)

               rate = l / max(l1, l2)

               if rate > 0.5:
                    # print('come', rate)
                    # print(x)
                    # print(y)

                    x1_point = [st1, dx['y']]
                    x2_point = [end1, dx['y']]

                    y1_point = [st2, dy['y']]
                    y2_point = [end2, dy['y']]
                    x_data = x['data']
                    y_data = y['data']
                    # print(x1_point,x2_point,y1_point,y2_point)
                    ix1, ix2 = x_data.index(x1_point), x_data.index(x2_point)
                    iy1, iy2 = y_data.index(y1_point), y_data.index(y2_point)
                    # print(ix1,ix2, iy1, iy2)
                    if ix2 - ix1 == 1:
                         kl1 = x_data[:ix1 + 1]
                         kl1.reverse()
                         kl2 = x_data[ix2:]
                         kl2.reverse()
                         fin_l1 = kl1 + kl2
                    elif ix2 - ix1 == -1:
                         kl1 = x_data[:ix2 + 1]
                         kl2 = x_data[ix1:]
                         fin_l1 = kl2 + kl1
                    elif ix2 - ix1 > 1:
                         x_data.reverse()
                         fin_l1 = x_data
                    else:
                         fin_l1 = x_data

                    if iy2 - iy1 == 1:
                         kl1 = y_data[:iy1 + 1]
                         kl2 = y_data[iy2:]
                         fin_l2 = kl2 + kl1
                    elif iy2 - iy1 == -1:
                         kl1 = y_data[:iy2 + 1]
                         kl2 = y_data[iy1:]
                         kl1.reverse()
                         kl2.reverse()

                         fin_l2 = kl1 + kl2
                    elif iy2 - iy1 < -1:
                         fin_l2 = y_data
                    else:
                         y_data.reverse()
                         fin_l2 = y_data

                    fin_result = fin_l1[1:-1] + fin_l2[1:-1]


if __name__ == '__main__':
     x = [[504, 2068], [504, 2069], [503, 2070], [502, 2069], [501, 2070], [500, 2070], [500, 2071], [499, 2072], [496, 2072], [496, 2073], [495, 2074], [493, 2074], [492, 2073], [492, 2072], [492, 2075], [491, 2076], [490, 2075], [490, 2074], [490, 2075], [489, 2076], [488, 2076], [488, 2077], [487, 2078], [484, 2078], [484, 2079], [483, 2080], [482, 2080], [481, 2081], [480, 2080], [480, 2081], [479, 2082], [478, 2082], [477, 2083], [476, 2082], [476, 2083], [475, 2084], [474, 2084], [474, 2085], [473, 2086], [472, 2086], [471, 2087], [470, 2086], [464, 2086], [463, 2087], [462, 2086], [461, 2087], [460, 2086], [459, 2087], [458, 2086], [458, 2087], [457, 2088], [456, 2088], [455, 2089], [454, 2088], [453, 2089], [452, 2089], [451, 2090], [448, 2090], [447, 2091], [446, 2090], [443, 2093], [442, 2092], [441, 2093], [440, 2092], [440, 2093], [439, 2094], [438, 2094], [437, 2095], [436, 2094], [436, 2096], [435, 2097], [434, 2096], [435, 2097], [434, 2098], [430, 2098], [429, 2099], [428, 2098], [428, 2101], [427, 2102], [424, 2102], [424, 2104], [422, 2106], [420, 2106], [420, 2107], [419, 2108], [419, 2109], [418, 2110], [416, 2110], [416, 2111], [415, 2112], [412, 2112], [412, 2113], [411, 2114], [408, 2114], [408, 2115], [407, 2116], [406, 2116], [406, 2117], [405, 2118], [404, 2117], [404, 2116], [404, 2117], [403, 2118], [400, 2118], [398, 2120], [396, 2120], [396, 2121], [395, 2122], [394, 2122], [394, 2123], [393, 2124], [392, 2123], [391, 2124], [388, 2124], [389, 2124], [390, 2125], [389, 2126], [388, 2126], [389, 2127], [388, 2128], [385, 2128], [385, 2129], [384, 2130], [382, 2130], [381, 2129], [382, 2128], [378, 2128], [379, 2128], [380, 2129], [380, 2131], [382, 2133], [381, 2134], [382, 2135], [382, 2136], [383, 2137], [383, 2138], [384, 2139], [384, 2142], [386, 2144], [386, 2147], [387, 2147], [388, 2148], [388, 2151], [390, 2153], [390, 2155], [391, 2156], [391, 2157], [392, 2158], [392, 2163], [393, 2164], [393, 2165], [394, 2166], [394, 2171], [395, 2171], [396, 2172], [396, 2178], [398, 2180], [398, 2183], [400, 2185], [400, 2188], [401, 2189], [401, 2190], [402, 2191], [402, 2194], [404, 2196], [404, 2200], [405, 2201], [405, 2202], [406, 2203], [406, 2205], [407, 2206], [407, 2207], [408, 2208], [408, 2211], [410, 2213], [410, 2215], [412, 2217], [412, 2221], [414, 2223], [414, 2225], [416, 2227], [416, 2231], [417, 2231], [418, 2232], [418, 2233], [419, 2234], [419, 2235], [420, 2236], [420, 2242], [421, 2243], [421, 2244], [422, 2245], [422, 2246], [423, 2247], [423, 2248], [424, 2249], [424, 2252], [425, 2252], [426, 2253], [427, 2253], [428, 2254], [428, 2255], [431, 2255], [431, 2254], [432, 2253], [433, 2253], [434, 2254], [433, 2255], [434, 2254], [435, 2254], [435, 2252], [436, 2251], [437, 2252], [438, 2251], [439, 2251], [440, 2250], [441, 2251], [441, 2250], [442, 2249], [443, 2249], [444, 2248], [445, 2249], [446, 2248], [447, 2249], [447, 2248], [448, 2247], [449, 2247], [450, 2246], [451, 2247], [451, 2246], [452, 2245], [453, 2245], [453, 2244], [454, 2243], [456, 2243], [458, 2241], [459, 2241], [459, 2240], [460, 2239], [467, 2239], [467, 2238], [468, 2237], [472, 2237], [471, 2236], [472, 2235], [477, 2235], [477, 2234], [478, 2233], [481, 2233], [481, 2232], [482, 2231], [485, 2231], [485, 2230], [486, 2229], [488, 2229], [489, 2228], [490, 2228], [491, 2227], [493, 2227], [495, 2225], [499, 2225], [499, 2224], [500, 2223], [500, 2222], [501, 2221], [503, 2221], [505, 2223], [507, 2221], [508, 2222], [507, 2221], [508, 2220], [507, 2220], [506, 2219], [507, 2218], [508, 2218], [509, 2217], [511, 2217], [511, 2089], [510, 2088], [510, 2084], [511, 2083], [511, 2075], [510, 2074], [510, 2073], [509, 2072], [509, 2070], [508, 2069], [507, 2070], [505, 2068]]
     y = [[571, 2046], [572, 2045], [572, 2044], [571, 2043], [571, 2040], [570, 2039], [570, 2038], [571, 2037], [571, 2036], [572, 2035], [571, 2034], [572, 2033], [572, 2032], [575, 2032], [576, 2031], [576, 2030], [579, 2030], [580, 2029], [580, 2028], [583, 2028], [584, 2027], [585, 2027], [586, 2026], [589, 2026], [590, 2025], [591, 2025], [592, 2024], [593, 2024], [594, 2023], [594, 2022], [597, 2022], [598, 2021], [598, 2020], [601, 2020], [602, 2019], [602, 2018], [604, 2018], [606, 2016], [607, 2016], [608, 2015], [608, 2014], [609, 2015], [610, 2014], [613, 2014], [614, 2013], [615, 2013], [616, 2012], [617, 2012], [618, 2011], [619, 2012], [620, 2011], [620, 2010], [623, 2010], [624, 2009], [624, 2008], [627, 2008], [628, 2007], [629, 2007], [630, 2006], [633, 2006], [634, 2005], [635, 2006], [636, 2005], [636, 2004], [639, 2004], [641, 2002], [643, 2002], [644, 2001], [644, 2000], [648, 2000], [649, 2001], [650, 2001], [651, 2002], [652, 2002], [653, 2003], [654, 2003], [654, 2004], [655, 2005], [656, 2005], [657, 2006], [658, 2006], [658, 2007], [659, 2008], [659, 2009], [660, 2010], [660, 2011], [661, 2012], [661, 2014], [662, 2015], [662, 2016], [663, 2017], [663, 2020], [664, 2021], [664, 2022], [665, 2023], [665, 2024], [667, 2026], [667, 2031], [668, 2032], [668, 2035], [669, 2036], [669, 2040], [670, 2041], [670, 2043], [671, 2044], [672, 2050], [672, 2051], [673, 2052], [673, 2055], [674, 2056], [674, 2057], [675, 2058], [675, 2062], [677, 2064], [677, 2069], [678, 2070], [678, 2071], [679, 2072], [679, 2085], [680, 2086], [680, 2088], [681, 2089], [681, 2095], [682, 2096], [682, 2100], [683, 2101], [683, 2117], [682, 2118], [682, 2119], [681, 2120], [681, 2123], [679, 2123], [677, 2125], [677, 2126], [676, 2127], [673, 2127], [668, 2132], [668, 2133], [667, 2134], [667, 2137], [664, 2137], [663, 2138], [663, 2139], [662, 2140], [662, 2141], [661, 2141], [660, 2142], [660, 2145], [659, 2146], [659, 2147], [657, 2149], [655, 2149], [653, 2151], [652, 2151], [650, 2153], [650, 2154], [651, 2155], [652, 2155], [646, 2155], [645, 2156], [644, 2156], [643, 2157], [643, 2158], [644, 2159], [646, 2159], [640, 2159], [639, 2160], [638, 2160], [637, 2161], [634, 2161], [633, 2162], [632, 2162], [631, 2163], [628, 2163], [627, 2164], [627, 2165], [623, 2165], [621, 2167], [622, 2168], [623, 2168], [624, 2169], [623, 2168], [621, 2170], [620, 2170], [619, 2171], [618, 2171], [617, 2172], [616, 2172], [615, 2173], [612, 2173], [610, 2175], [609, 2175], [608, 2176], [608, 2177], [607, 2177], [606, 2178], [604, 2178], [603, 2179], [600, 2179], [599, 2180], [599, 2181], [598, 2181], [597, 2182], [598, 2183], [599, 2183], [598, 2183], [597, 2184], [597, 2185], [596, 2185], [595, 2186], [595, 2187], [594, 2187], [593, 2188], [593, 2189], [591, 2189], [590, 2190], [590, 2191], [586, 2191], [585, 2192], [585, 2193], [582, 2193], [581, 2194], [579, 2194], [578, 2195], [576, 2195], [575, 2196], [574, 2196], [573, 2197], [571, 2197], [570, 2198], [569, 2198], [568, 2199], [566, 2197], [565, 2198], [565, 2199], [564, 2199], [563, 2200], [564, 2201], [558, 2201], [557, 2202], [557, 2204], [555, 2204], [554, 2203], [553, 2204], [552, 2204], [551, 2205], [550, 2204], [549, 2205], [549, 2206], [546, 2206], [545, 2207], [539, 2207], [538, 2208], [539, 2209], [540, 2209], [538, 2209], [537, 2210], [537, 2211], [536, 2211], [536, 2210], [535, 2209], [534, 2209], [533, 2210], [533, 2211], [532, 2211], [532, 2210], [531, 2209], [528, 2209], [529, 2208], [528, 2207], [528, 2206], [527, 2205], [525, 2205], [524, 2206], [525, 2207], [525, 2208], [524, 2207], [523, 2207], [522, 2206], [521, 2207], [521, 2212], [519, 2212], [517, 2214], [518, 2215], [517, 2216], [518, 2217], [517, 2218], [517, 2219], [512, 2219], [512, 2215], [513, 2214], [512, 2213], [512, 2076], [513, 2076], [514, 2077], [515, 2077], [518, 2080], [519, 2080], [520, 2081], [521, 2081], [522, 2082], [525, 2082], [526, 2081], [527, 2081], [528, 2080], [530, 2080], [532, 2078], [533, 2078], [536, 2075], [537, 2075], [540, 2072], [540, 2071], [543, 2068], [543, 2067], [544, 2066], [544, 2061], [545, 2060], [544, 2059], [545, 2058], [546, 2058], [547, 2057], [547, 2055], [546, 2054], [545, 2055], [545, 2056], [545, 2048], [545, 2050], [546, 2051], [547, 2050], [550, 2050], [551, 2049], [551, 2048], [551, 2050], [552, 2051], [551, 2052], [551, 2053], [552, 2054], [553, 2054], [554, 2055], [555, 2054], [555, 2053], [556, 2054], [557, 2054], [560, 2051], [560, 2050], [564, 2050]]
     x = instance_handler.get_combine_loc([x])
     y = instance_handler.get_combine_loc([y])
     print(x)
     print(y)


